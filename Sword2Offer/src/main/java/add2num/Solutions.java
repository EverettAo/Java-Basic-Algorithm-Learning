package add2num;
/**
 * @author Everett
 * @date 2021-03-09 9:42 PM
 */

/**
 * @author Everett
 * @version 1.0
 * @description TODO
 * @date 3/9/2021 9:42 PM
 */
public class Solutions {
    public static void main(String[] args) {
        System.out.println(solution_1(16, 8));
    }

    /*    首先看十进制是如何做的： 5+7=12，三步走
        第一步：相加各位的值，不算进位，得到2。
        第二步：计算进位值，得到10. 如果这一步的进位值为0，那么第一步得到的值就是最终结果。
        第三步：重复上述两步，只是相加的值变成上述两步的得到的结果2和10，得到12。
        同样我们可以用三步走的方式计算二进制值相加： 5-101，7-111 第一步：相加各位的值，不算进位，得到010，二进制每位相加就相当于各位做异或操作，101^111。
        第二步：计算进位值，得到1010，相当于各位做与操作得到101，再向左移一位得到1010，(101&111)<<1。
        第三步重复上述两步， 各位相加 010^1010=1000，进位值为100=(010&1010)<<1。
        继续重复上述两步：1000^100 = 1100，进位值为0，跳出循环，1100为最终结果。*/
    public static int solution_1(int num1, int num2) {
        /**
         * 不算进位的加：异或
         * 得到进位：与操作再左移一位
         * 将上两步之和做加法，所以形成了一个循环，直到进位为0
         */
        int tmp;
        while (num2 != 0) {
            tmp = num1 ^ num2; // 得到不考虑进位的和
            num2 = (num1 & num2) << 1; // 得到进位
            num1 = tmp;
        }
        return num1;
    }
}
